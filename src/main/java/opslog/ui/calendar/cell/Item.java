package opslog.ui.calendar.cell;

import javafx.beans.property.ObjectProperty;
import javafx.beans.property.SimpleObjectProperty;
import javafx.scene.control.Label;
import javafx.scene.layout.HBox;
import opslog.object.event.Calendar;
import opslog.object.event.Checklist;
import javafx.scene.control.cell.CheckBoxTreeCell;
import javafx.scene.control.TreeView;

/*
	This Class is used to display and hold the calendar content. 
	Creating object properties allows UUID generated by sql to be stored for easier tracking
	the application can use this to delete the label when request by calling

	Example usage:
	Calendar calendar = new Calendar(); // assuming you set all of the properties
	CalendarCell calendarCell = new CalendarCell(date.now()); 
	Event calendarCellEvent = new Event();
	calendarCellEvent.setCalendar(calendar);
	calendarCell.add(calendarCellEvent); // add to the vbox in the calendar cell

	<--- Imagined removal action like button or db notification -->
	for(calendarCellEvent calendarCellEvent: calendarCell.getList()){
		String id = calendarCellEvent.getCalendar().getID();
		if(id.equals(requestedID)){
			// this will automatically delete the hbox
			// via change listeners
			calendarCell.removeEvent(id);
		}
	}
	calendarCell.removeEvent(id)
	
*/

public class Item extends HBox{

	private ObjectProperty<Calendar> calendarProperty = new SimpleObjectProperty<>();
	private ObjectProperty<Checklist> checklistProperty = new SimpleObjectProperty<>();
	
	private Label eventLabel = new Label();

	// you will need to create an extended checkbox tree objext
	// so that when it is given a checklist object 
	// it will automatically generate its own task items 
	// i will allso need to implement the code here that allows the usre to generate a popup to
	// use the CheckBoxTreeItem<T> to creaet the parent and child item
	private TreeView<Checklist> checkBox = new TreeView<>();

	public Item(Calendar calendar){
		super();
		this.calendarProperty.set(calendar);
		this.checklistProperty = new SimpleObjectProperty<>();
		
		eventLabel.setText(calendarProperty.get().titleProperty().get());
		// Label Visual effects go here
		calendarProperty.addListener((obs,ov,nv) -> {
			//if the calendar changes update the label
			eventLabel.setText(nv.titleProperty().get());
		});

		// add mouse events here for popup displaying event information
	}

	public Item(Checklist checklist){
		super();
		this.calendarProperty = new SimpleObjectProperty<>();
		this.checklistProperty.set(checklist);

		eventLabel.setText(checklistProperty.get().getTitle());
		// Label Visual effects go here
		
		//CheckboxTree stuff goes here
		
		checklistProperty.addListener((obs,ov,nv) -> {
			eventLabel.setText(nv.getTitle());
		});

		// add mouse events here for popup displaying event information
	}

	public void setCalendar(Calendar calendar){
		this.calendarProperty.set(calendar);
	}

	public void setChecklist(Checklist checklist){
		this.checklistProperty.set(checklist);
	}

	public Calendar getCalendar(){
		return calendarProperty.get();
	}

	public Checklist getChecklist(){
		return checklistProperty.get();
	}
}