package opslog.ui.calendar.cell;

import java.time.LocalTime;

import javafx.beans.property.ObjectProperty;
import javafx.beans.property.SimpleObjectProperty;
import javafx.beans.property.SimpleStringProperty;
import javafx.beans.property.StringProperty;
import javafx.geometry.Pos;
import javafx.scene.control.CheckBox;
import javafx.scene.control.Label;
import javafx.scene.layout.Background;
import javafx.scene.layout.BackgroundFill;
import javafx.scene.layout.HBox;
import javafx.scene.text.Font;
import javafx.scene.text.Text;
import javafx.scene.text.TextFlow;
import opslog.object.event.Calendar;
import opslog.object.event.ScheduledChecklist;
import opslog.object.event.Task;
import opslog.util.Settings;
import javafx.scene.control.cell.CheckBoxTreeCell;
import javafx.scene.control.TreeView;

/*
	This Class is used to display and hold the calendar content.
	Creating object properties allows UUID generated by sql to be stored for easier tracking
	the application can use this to delete the label when request by calling

	Example usage:
	Calendar calendar = new Calendar(); // assuming you set all of the properties
	CalendarCell calendarCell = new CalendarCell(date.now());
	Event calendarCellEvent = new Event();
	calendarCellEvent.setCalendar(calendar);
	calendarCell.add(calendarCellEvent); // add to the vbox in the calendar cell

	<--- Imagined removal action like button or db notification -->
	for(calendarCellEvent calendarCellEvent: calendarCell.getList()){
		String id = calendarCellEvent.getCalendar().getID();
		if(id.equals(requestedID)){
			// this will automatically delete the hbox
			// via change listeners
			calendarCell.removeEvent(id);
		}
	}
	calendarCell.removeEvent(id)

*/

public class Item extends HBox{

	private final ObjectProperty<Calendar> calendarProperty = new SimpleObjectProperty<>();
	private final ObjectProperty<ScheduledChecklist> scheduledChecklistProperty = new SimpleObjectProperty<>();
	private final ObjectProperty<Task> taskProperty = new SimpleObjectProperty<>();
	private final StringProperty timeProperty = new SimpleStringProperty();

	Label base = new Label();
	Label taskLabel = new Label();
	CheckBox checkBox = new CheckBox();
	HBox taskContainer = new HBox(checkBox,taskLabel);

	public Item(){
		super();
		this.setPadding(Settings.INSETS);
		listeners();
		getChildren().addAll(taskContainer,base);
	}

	public StringProperty timeProperty(){
		return timeProperty;
	}

	public ObjectProperty<Calendar> calendarProperty(){
		return calendarProperty;
	}

	public ObjectProperty<ScheduledChecklist> scheduledChecklistProperty(){
		return scheduledChecklistProperty;
	}

	public ObjectProperty<Task> taskProperty(){
		return taskProperty;
	}

	private void listeners(){
		calendarProperty.addListener((obs,ov,nv) -> {
			base = basicLabel(nv.titleProperty().get());
			base.setBackground(
					new Background(
							new BackgroundFill(
									calendarProperty.get().getTags().get(0).getColor(),
									Settings.CORNER_RADII,
									Settings.INSETS_ZERO
							)
					)
			);
			this.setBackground(
					new Background(
							new BackgroundFill(
									calendarProperty.get().getTags().get(0).getColor(),
									Settings.CORNER_RADII,
									Settings.INSETS_ZERO
							)
					)
			);
			taskContainer.setVisible(false);
			checkBox.setVisible(false);
			taskLabel.setVisible(false);
		});

		scheduledChecklistProperty.addListener((obs,ov,nv) -> {
			String scheduledChecklistTitle = scheduledChecklistProperty.get().titleProperty().get();
			base = basicLabel(scheduledChecklistTitle);
			base.setBackground(
					new Background(
							new BackgroundFill(
									scheduledChecklistProperty.get().getTags().get(0).getColor(),
									Settings.CORNER_RADII,
									Settings.INSETS_ZERO
							)
					)
			);

			this.setBackground(
					new Background(
							new BackgroundFill(
									scheduledChecklistProperty.get().getTags().get(0).getColor(),
									Settings.CORNER_RADII,
									Settings.INSETS_ZERO
							)
					)
			);

		});

		taskProperty.addListener((obs,ov,nv) -> {
			String taskTitle = nv.titleProperty().get();
			Label taskLabel = taskLabel(taskTitle,timeProperty.get());
			taskLabel.setBackground(
					new Background(
							new BackgroundFill(
									taskProperty.get().getTags().get(0).getColor(),
									Settings.CORNER_RADII,
									Settings.INSETS_ZERO
							)
					)
			);

			taskContainer.setBackground(
					new Background(
							new BackgroundFill(
									taskProperty.get().getTags().get(0).getColor(),
									Settings.CORNER_RADII,
									Settings.INSETS_ZERO
							)
					)
			);
		});
	}

	private Label taskLabel(String taskTitle, String taskTime){
		Text title = new Text(taskTitle);
		title.fillProperty().bind(Settings.textColor);
		title.fontProperty().bind(Settings.fontCalendarExtraSmall);

		Text spacer = new Text("\n");
		spacer.setFont(Font.font("Arial", 20));

		Text time = new Text(taskTime);
		time.fillProperty().bind(Settings.textColor);
		time.fontProperty().bind(Settings.fontCalendarExtraSmall);

		TextFlow textFlow = new TextFlow(title,spacer,time);

		Label label = new Label();
		label.setGraphic(textFlow);
		label.setPadding(Settings.INSETS);
		label.setAlignment(Pos.TOP_CENTER);
		label.borderProperty().bind(Settings.transparentBorder);
		return label;
	}

	private Label basicLabel(String title){
		Text text = new Text(title);
		text.fillProperty().bind(Settings.textColor);
		text.fontProperty().bind(Settings.fontCalendarSmall);

		Label label = new Label();
		label.setGraphic(text);
		label.setPadding(Settings.INSETS);
		label.setAlignment(Pos.TOP_CENTER);
		label.borderProperty().bind(Settings.transparentBorder);
		return label;
	}
}