
-- Create log table
CREATE TABLE log_table (
    id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
	date DATE,
	time TIME,
	typeID TEXT,
	tagIDs TEXT,
	initials TEXT,
	description TEXT
);

CREATE OR REPLACE FUNCTION notify_log_table_change()
RETURNS TRIGGER AS $$
BEGIN
    -- Send a notification to the 'log_changes' channel
    PERFORM pg_notify('log_changes', TG_OP || ' on log_table id: ' || NEW.id::text);
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER log_table_changes
AFTER INSERT OR UPDATE OR DELETE ON log_table
FOR EACH ROW EXECUTE FUNCTION notify_log_table_change();

-- Create pinboard table
CREATE TABLE pinboard_table (
	id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
	date DATE,
	time TIME,
	typeID TEXT,
	tagIDs TEXT,
	initials TEXT,
	description TEXT
);

CREATE OR REPLACE FUNCTION notify_pinboard_table_change()
RETURNS TRIGGER AS $$
BEGIN
	-- Send a notification to the 'pinboard_table' channel
	PERFORM pg_notify('pinboard_table', TG_OP || ' on pinboard_table id: ' || NEW.id::text);
	RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER pinboard_table_changes
AFTER INSERT OR UPDATE OR DELETE ON pinboard_table
FOR EACH ROW EXECUTE FUNCTION notify_pinboard_table_change();


-- Create checklist table
CREATE TABLE checklist_table (
    id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
	title TEXT,
	task_list TEXT,
	typeID TEXT,
	tagIDs TEXT,
	initials TEXT,
	description TEXT
);

CREATE OR REPLACE FUNCTION notify_checklist_table_change()
RETURNS TRIGGER AS $$
BEGIN
    -- Send a notification to the 'checklist_table' channel
    PERFORM pg_notify('checklist_table', TG_OP || ' on checklist_table id: ' || NEW.id::text);
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER checklist_table_changes
AFTER INSERT OR UPDATE OR DELETE ON checklist_table
FOR EACH ROW EXECUTE FUNCTION notify_checklist_table_change();

-- Create scheduled_checklist_table---
CREATE TABLE scheduled_checklist_table (
    id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
    title TEXT,
	start_date DATE,
	stop_date DATE,
	taskIDs TEXT,
	offsets TEXT,
	durations TEXT,
	status_list TEXT,
	percentage TEXT,
	typeID TEXT,
    tagIDs TEXT,
    initials TEXT,
    description TEXT
);

CREATE OR REPLACE FUNCTION notify_scheduled_checklist_table_change()
RETURNS TRIGGER AS $$
BEGIN
    -- Send a notification to the 'scheduled_checklist_table' channel
    PERFORM pg_notify('scheduled_checklist_table', TG_OP || ' on scheduled_checklist_table id: ' || NEW.id::text);
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER scheduled_checklist_table_changes
AFTER INSERT OR UPDATE OR DELETE ON scheduled_checklist_table
FOR EACH ROW EXECUTE FUNCTION notify_scheduled_checklist_table_change();

-- Create task_table
CREATE TABLE task_table (
    id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
	title TEXT,
	typeID TEXT,
	tagIDs TEXT,
	initials TEXT,
	description TEXT
);

CREATE OR REPLACE FUNCTION notify_task_table_change()
RETURNS TRIGGER AS $$
BEGIN
    -- Send a notification to the 'task_table' channel
    PERFORM pg_notify('task_table', TG_OP || ' on task_table id: ' || NEW.id::text);
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER task_table_changes
AFTER INSERT OR UPDATE OR DELETE ON task_table
FOR EACH ROW EXECUTE FUNCTION notify_task_table_change();

-- Create calendar_table
CREATE TABLE calendar_table (
    id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
	title TEXT,
	start_date DATE,
	stop_date DATE,
	start_time TIME,
	stop_time TIME,
	typeID TEXT,
	tagIDs TEXT,
	initials TEXT,
	description TEXT
);

CREATE OR REPLACE FUNCTION notify_calendar_table_change()
RETURNS TRIGGER AS $$
BEGIN
    -- Send a notification to the 'calendar_table' channel
    PERFORM pg_notify('calendar_table', TG_OP || ' on calendar_table id: ' || NEW.id::text);
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER calendar_table_changes
AFTER INSERT OR UPDATE OR DELETE ON calendar_table
FOR EACH ROW EXECUTE FUNCTION notify_calendar_table_change();

-- Create scheduled_event_table----
CREATE TABLE scheduled_event_table (
	id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
	start_date DATE,
	stop_date DATE,
	start_time TIME,
	stop_time TIME,
	full_day TEXT,
	recurrance TEXT,
	recurrance_rule TEXT,
	title TEXT,
	location TEXT,
	typeID TEXT,
	tagIDs TEXT,
	initials TEXT,
	description TEXT
);

CREATE OR REPLACE FUNCTION notify_scheduled_event_table_change()
RETURNS TRIGGER AS $$
BEGIN
	-- Send a notification to the 'scheduled_event_table' channel
	PERFORM pg_notify('scheduled_event_table', TG_OP || ' on scheduled_event_table id: ' || NEW.id::text);
	RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER scheduled_event_table_changes
AFTER INSERT OR UPDATE OR DELETE ON scheduled_event_table
FOR EACH ROW EXECUTE FUNCTION notify_scheduled_event_table_change();

-- create format_table
CREATE TABLE format_table (
    id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
	title TEXT,
	format TEXT
);

CREATE OR REPLACE FUNCTION notify_format_table_change()
RETURNS TRIGGER AS $$
BEGIN
    -- Send a notification to the 'format_table' channel
    PERFORM pg_notify('format_table', TG_OP || ' on format_table id: ' || NEW.id::text);
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER format_table_changes
AFTER INSERT OR UPDATE OR DELETE ON format_table
FOR EACH ROW EXECUTE FUNCTION notify_format_table_change();

-- create tag_table
CREATE TABLE tag_table (
    id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
	title TEXT,
	color TEXT
);

CREATE OR REPLACE FUNCTION notify_tag_table_change()
RETURNS TRIGGER AS $$
BEGIN
    -- Send a notification to the 'tag_table' channel
    PERFORM pg_notify('tag_table', TG_OP || ' on tag_table id: ' || NEW.id::text);
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER tag_table_changes
AFTER INSERT OR UPDATE OR DELETE ON tag_table
FOR EACH ROW EXECUTE FUNCTION notify_tag_table_change();

-- create type_table
CREATE TABLE type_table (
    id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
	title TEXT,
	pattern TEXT
);

CREATE OR REPLACE FUNCTION notify_type_table_change()
RETURNS TRIGGER AS $$
BEGIN
    -- Send a notification to the 'type_table' channel
    PERFORM pg_notify('type_table', TG_OP || ' on type_table id: ' || NEW.id::text);
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER type_table_changes
AFTER INSERT OR UPDATE OR DELETE ON type_table
FOR EACH ROW EXECUTE FUNCTION notify_type_table_change();

-- create profile_table
CREATE TABLE profile_table (
    id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
	title TEXT,
	root_color TEXT,
	primary_color TEXT,
	secondar_color TEXT,
	border_color TEXT,
	text_color TEXT,
	text_size TEXT,
	text_font TEXT
);

CREATE OR REPLACE FUNCTION notify_profile_table_change()
RETURNS TRIGGER AS $$
BEGIN
    -- Send a notification to the 'profile_table' channel
    PERFORM pg_notify('profile_table', TG_OP || ' on profile_table id: ' || NEW.id::text);
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER profile_table_changes
AFTER INSERT OR UPDATE OR DELETE ON profile_table
FOR EACH ROW EXECUTE FUNCTION notify_profile_table_change();
