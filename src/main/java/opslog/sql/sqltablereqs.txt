PostGre Setup 






PostGre SQL Tables

--- LOG TABLE ---
CREATE TABLE log (
  id SERIAL PRIMARY KEY,
  date DATE NOT NULL,
  time TIME NOT NULL,
  type VARCHAR(255) NOT NULL,
  tag VARCHAR(255) NOT NULL,
  initials VARCHAR(255) NOT NULL,
  description TEXT NOT NULL
);

--- LOG NOTIFY/LISTEN ---

CREATE OR REPLACE FUNCTION notify_log_changes() RETURNS TRIGGER AS $$
BEGIN
  IF TG_OP = 'DELETE' THEN
    PERFORM pg_notify('log_channel', TG_OP || ':' || OLD.id);
  ELSE
    PERFORM pg_notify('log_channel', TG_OP || ':' || NEW.id);
  END IF;
  RETURN NULL;
END;
$$ LANGUAGE plpgsql;

--- LOG TRIGGER---

CREATE TRIGGER notify_log
AFTER INSERT OR UPDATE OR DELETE ON log
FOR EACH ROW
EXECUTE FUNCTION notify_log_changes();


--- PINBOARD TABLE
CREATE TABLE pinboard (
  id SERIAL PRIMARY KEY,
  date DATE NOT NULL,
  time TIME NOT NULL,
  type VARCHAR(255) NOT NULL,
  tag VARCHAR(255) NOT NULL,
  initials VARCHAR(255) NOT NULL,
  description TEXT NOT NULL
);

-- Create the calendar table
CREATE TABLE calendar (
  id SERIAL PRIMARY KEY,
  start_date DATE NOT NULL,
  stop_date DATE NOT NULL,
  start_time TIME NOT NULL,
  stop_time TIME NOT NULL,
  type VARCHAR(255) NOT NULL,
  tag VARCHAR(255) NOT NULL,
  initials VARCHAR(255) NOT NULL,
  description TEXT NOT NULL
);

-- Create the checklist table
CREATE TABLE checklist (
  id SERIAL PRIMARY KEY,
  parent INTEGER NOT NULL,
  children INTEGER NOT NULL,
  states VARCHAR(255) NOT NULL,
  percentage INTEGER NOT NULL
);

-- Create the parent_task table
CREATE TABLE parent_task (
  id SERIAL PRIMARY KEY,
  task VARCHAR(255) NOT NULL,
  start_date DATE NOT NULL,
  stop_date DATE NOT NULL
);

-- Create the child_task table
CREATE TABLE child_task (
  id SERIAL PRIMARY KEY,
  task VARCHAR(255) NOT NULL,
  start_time TIME NOT NULL,
  stop_date DATE NOT NULL
);

-- Create the task table
CREATE TABLE task (
  id SERIAL PRIMARY KEY,
  title VARCHAR(255) NOT NULL,
  type VARCHAR(255) NOT NULL,
  tag VARCHAR(255) NOT NULL,
  description TEXT NOT NULL
);

-- Create the tag table
CREATE TABLE tag (
  id SERIAL PRIMARY KEY,
  title VARCHAR(255) NOT NULL,
  color VARCHAR(255) NOT NULL
);

-- Create the type table
CREATE TABLE type (
  id SERIAL PRIMARY KEY,
  title VARCHAR(255) NOT NULL,
  pattern VARCHAR(255) NOT NULL
);

-- Create the format table
CREATE TABLE format (
  id SERIAL PRIMARY KEY,
  title VARCHAR(255) NOT NULL,
  description TEXT NOT NULL
);

-- Create the profile table
CREATE TABLE profile (
  id SERIAL PRIMARY KEY,
  title VARCHAR(255) NOT NULL,
  root_color VARCHAR(255) NOT NULL,
  primary_color VARCHAR(255) NOT NULL,
  secondary_color VARCHAR(255) NOT NULL,
  border_color VARCHAR(255) NOT NULL,
  text_color VARCHAR(255) NOT NULL,
  text_size VARCHAR(255) NOT NULL,
  text_font VARCHAR(255) NOT NULL
);




CREATE OR REPLACE FUNCTION notify_pinboard_changes() RETURNS TRIGGER AS $$
BEGIN
  IF TG_OP = 'DELETE' THEN
    PERFORM pg_notify('pinboard_channel', TG_OP || ':' || OLD.id);
  ELSE
    PERFORM pg_notify('pinboard_channel', TG_OP || ':' || NEW.id);
  END IF;
  RETURN NULL;
END;
$$ LANGUAGE plpgsql;