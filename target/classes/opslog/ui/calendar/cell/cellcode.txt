/* 
* Used @CalendarMonth.java 
* UpdatePropertys the calendarcells tracked events
*/
public void addEvent(Event event) {
	dailyEvents.add(event);
}

/* 
* Used @CalendarMonth.java 
* UpdatePropertys the calendarcells tracked events
*/
public void removeEvent(Event event) {
	dailyEvents.remove(event);
}

/* 
* Determines if event being removed is an instance of
* Calendar.java or Checklist.java
*/
private void removeDisplay(List<Event> newEvents){
	for(Event event : newEvents){
		if (event instanceof Calendar) {
			Calendar calendar = (Calendar) event;
			removeCalEvent(calendar);
		} else if (event instanceof Checklist) {
			Checklist checklist = (Checklist) event;
			removeChckEvent(checklist);
		}
	}
}

/* 
* Utilizes the @Item.java to remove an instance of Calendar
* from the UI
*/
private void removeCalEvent(Calendar calendar){
	String id = calendar.getID();
	for(Node node : eventContainer.getChildren()){
		if(node instanceof Item){
			Item cellEvent = (Item) node;
			if(id.equals(cellEvent.getCalendar().getID())){
				eventContainer.getChildren().remove(cellEvent);
			}
		}
	}
}

/* 
* Utilizes the @Item.java to remove an instance of Checklist
* from the UI
*/
private void removeChckEvent(Checklist checklist){
	String id = checklist.getID();
	for(Node node: eventContainer.getChildren()){
		if(node instanceof Item){
			Item cellEvent = (Item) node;
			if(id.equals(cellEvent.getChecklist().getID())){
				eventContainer.getChildren().remove(cellEvent);
				//possible garbage collection needed for memory safety?
			}
		}
	}
}

/* 
* Determines if event being added is an instance of
* Calendar.java or Checklist.java
*/
private void displayNew(List<Event> newEvents){
	for(Event event : newEvents){
		if (event instanceof Calendar) {
			displayCalEvent(event);
		} else if (event instanceof Checklist) {
			displayChckEvent(event);
		}
	}
}

/* 
* Utilizes the @Item.java to add an instance of Calendar
* tp the UI
*/
private void displayCalEvent(Event event){
	Calendar calendarEvent = (Calendar) event;
	Item displayEvent = new Item(calendarEvent);
	eventContainer.getChildren().add(displayEvent);
}

/* 
* Utilizes the @Item.java to add an instance of Checklist
* to the UI
*/
private void displayChckEvent(Event event){
	Checklist checklistEvent = (Checklist) event;
	Item displayEvent = new Item(checklistEvent);
	eventContainer.getChildren().add(displayEvent);
}

public void setCurrentMonthProperty(boolean bool){
	this.currentMonth.set(bool);
}

private BooleanProperty currentMonth(){
	return currentMonth;
}

/* 
* Used @CalendarMonth.java 
* Retrieves this instances associated date.
* allows the CalendarMonth.java to determine
* if a specific event should be stored in this instance
*/
public LocalDate getDate(){
	return date.get();
}



/* 
* Initializes the style of the graphical display and links them
* to the Settings.java and listens for changes
*/
private void initializeProperties(){
	dailyEvents.addListener((ListChangeListener<Event>) change -> handleDailyEventChanges(change));

	currentMonth().addListener((observable, oldValue, newValue) -> handleBackgroundChange(newValue));
	focusedProperty().addListener((obs,wasFocused,isFocused) -> handleBorderChange(isFocused));
	hoverProperty().addListener((obs,wasHovered,isHovered) -> handleBorderChange(isHovered));

	setSpacing(Settings.SPACING);
	setPadding(Settings.INSETS);

	borderProperty().bind(Settings.cellBorder);
	backgroundProperty().bind(Settings.secondaryBackgroundZ);
}

private void handleBackgroundChange(Boolean newValue){
	backgroundProperty().unbind();
	if(newValue){
		// if true then set the background
		backgroundProperty().bind(Settings.secondaryBackgroundZ);
	}else{
		backgroundProperty().bind(Settings.dateOutOfScopeBackground);
	}
}

private void handleBorderChange(Boolean newValue){
	borderProperty().unbind();
	if(newValue){
		borderProperty().bind(Settings.dateSelectBorder);
	}else{
		borderProperty().bind(Settings.cellBorder);
	}
}

private void handleTemporalChange(LocalDate newDate, YearMonth newYearMonth){
	header.setDate(newDate);
	System.out.println("Calendar Cell: Checking if date is out of scope: " + newDate.toString());
	System.out.println("Calendar Cell: YearMonth currently: " + yearMonth.get());
	LocalDate firstDay = newYearMonth.atDay(1);
	LocalDate lastDay = newYearMonth.atEndOfMonth();
	if(newDate.isBefore(firstDay) || newDate.isAfter(lastDay)){
		System.out.println("Calendar Cell: Date in month: false");
		currentMonth.set(false);
	}else{
		System.out.println("Calendar Cell: Date in month: true");
		currentMonth.set(true);
	}
}

private void handleDailyEventChanges(ListChangeListener.Change<? extends Event> change) {
	while (change.next()) {
		if (change.wasAdded()) {
			// Update the header count
			// header.setNumEvents(dailyEvents.size());

			// Collect and display new events
			List<Event> addedEvents = new ArrayList<>(change.getAddedSubList());
			displayNew(addedEvents);

		} else if (change.wasRemoved()) {
			// Update the header count
			// header.setNumEvents(dailyEvents.size());

			// Collect and remove events from display
			List<Event> removedEvents = new ArrayList<>(change.getRemoved());
			removeDisplay(removedEvents);

		} else if (change.wasUpdated() || change.wasReplaced()) {
			// Handle updated or replaced events if needed
			for (Event event : dailyEvents) {
				// Update logic here
			}
		}
	}
}